package com.aidbud.ui.components.chat

import android.net.Uri // Import Uri
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.Crossfade
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.animation.core.tween
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.infiniteRepeatable
import androidx.compose.animation.core.RepeatMode
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.runtime.LaunchedEffect
import kotlinx.coroutines.delay
import androidx.compose.foundation.lazy.LazyRow // Import LazyRow
import androidx.compose.foundation.lazy.items // Import items for LazyRow
import androidx.compose.foundation.layout.height // Import height for fixed height
import androidx.compose.foundation.layout.Spacer // Import Spacer for vertical spacing
import androidx.compose.foundation.layout.* // For fillMaxSize, fillMaxHeight, Arrangement, PaddingValues, etc.
import androidx.compose.ui.unit.dp

import com.aidbud.ui.components.cameraoverlay.attachmentbar.AttachmentThumbnail // Import AttachmentThumbnail

enum class MessageRole {
    User, // Message sent by the user
    LLM   // Message generated by the Language Model
}

@Composable
fun MessageBox(
    modifier: Modifier = Modifier,
    role: MessageRole,
    text: String,
    attachments: List<Uri>? = null,
    isLoading: Boolean = false,
    isLoadingText: String = "",
    error: String? = null
) {
    val backgroundColor: Color
    val alignment: Alignment
    val shape: RoundedCornerShape
    val maxWidthFraction: Float // For user bubble width

    when (role) {
        MessageRole.User -> {
            backgroundColor = MaterialTheme.colorScheme.primaryContainer
            alignment = Alignment.CenterEnd // Align to right for user
            // Bubble shape for user: rounded on all corners except bottom-end (sharp)
            shape = RoundedCornerShape(topStart = 16.dp, topEnd = 16.dp, bottomStart = 16.dp, bottomEnd = 4.dp)
            maxWidthFraction = 0.8f // User bubble takes up 80% of width
        }
        MessageRole.LLM -> {
            backgroundColor = MaterialTheme.colorScheme.surfaceVariant
            alignment = Alignment.CenterStart // Align to left for LLM
            // LLM output is full width, no specific bubble shape needed, but keeping for consistency if desired
            shape = RoundedCornerShape(0.dp) // No rounded corners for full width
            maxWidthFraction = 1.0f // LLM output fills full width
        }
    }

    // Animate alpha for the "Editing document..." text
    val animatedEditingAlpha by animateFloatAsState(
        targetValue = if (isLoading) 1f else 0f, // Fade in/out
        animationSpec = infiniteRepeatable(
            animation = tween(durationMillis = 800), // Pulse duration
            repeatMode = RepeatMode.Reverse // Fade in and out
        ), label = "editingAlphaAnimation"
    )

    Box(
        modifier = modifier.fillMaxWidth(), // Parent box always fills width for alignment
        contentAlignment = alignment // Aligns the inner message bubble/content
    ) {
        // This is the main message bubble/container
        Box(
            modifier = Modifier
                .fillMaxWidth(maxWidthFraction) // Apply width fraction for user, full for LLM
                .wrapContentHeight() // Wrap content height
                .clip(shape) // Apply bubble shape or no shape
                .background(backgroundColor)
                .padding(12.dp) // Inner padding for text
        ) {
            Column { // Use a Column to stack the editing indicator and the message text

                attachments?.takeIf { it.isNotEmpty() }?.let {
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(80.dp) // Fixed height for the attachment box
                            .clip(RoundedCornerShape(8.dp)) // Optional: rounded corners for the attachment box
                            .background(Color.Transparent) // Transparent background for the attachment box
                            .padding(bottom = 8.dp) // Padding below attachments before text
                    ) {
                        LazyRow(
                            modifier = Modifier.fillMaxSize(), // Fill the size of its parent Box
                            horizontalArrangement = Arrangement.spacedBy(8.dp), // Spacing between thumbnails
                            verticalAlignment = Alignment.CenterVertically,
                            contentPadding = PaddingValues(horizontal = 4.dp) // Padding for the lazy row content
                        ) {
                            items(it) { uri ->
                                AttachmentThumbnail(
                                    modifier = Modifier.fillMaxHeight(), // Fill height, which will determine width via aspectRatio
                                    uri = uri,
                                    onDelete = { /* No-op for display-only attachments */ }
                                )
                            }
                        }
                    }
                }

                // Main message text
                Text(
                    text = text,
                    color = if (role == MessageRole.User) MaterialTheme.colorScheme.onPrimaryContainer else MaterialTheme.colorScheme.onSurface,
                    style = MaterialTheme.typography.bodyMedium
                )

                // Animated Editing Indicator for LLM, appears BELOW the text
                if (role == MessageRole.LLM) { // Only show editing indicator for LLM messages
                    AnimatedVisibility(
                        visible = isLoading,
                        enter = fadeIn(animationSpec = tween(durationMillis = 300)), // Entry animation
                        exit = fadeOut(animationSpec = tween(durationMillis = 300)) // Exit animation
                    ) {
                        Box(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(top = 4.dp) // Padding above the editing indicator
                                .clip(RoundedCornerShape(8.dp))
                                .background(Color.LightGray.copy(alpha = 0.7f * animatedEditingAlpha)) // Apply animated alpha
                                .padding(horizontal = 8.dp, vertical = 6.dp),
                            contentAlignment = Alignment.CenterStart
                        ) {
                            Text(
                                text = isLoadingText,
                                style = MaterialTheme.typography.bodySmall,
                                color = MaterialTheme.colorScheme.onSurface.copy(alpha = animatedEditingAlpha) // Apply animated alpha to text
                            )
                        }
                    }
                }
            }
        }
    }
}